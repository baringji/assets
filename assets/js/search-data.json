{"0": {
    "doc": 404,
    "title": 404,
    "content": "# Oops! {: .mx-auto .text-center .fs-10 .fw-500 .text-green-000 } The page you were looking for doesnâ€™t exist. {: .mx-auto .text-center } You may have misstyped the address or the page may have moved! {: .mx-auto .text-center } ",
    "url": "https://inpsyde.github.io/assets/404.html",
    "relUrl": "/404.html"
  },"1": {
    "doc": "Asset Factory",
    "title": "Asset Factory",
    "content": "# Asset Factory {: .fw-500 } ## `AssetFactory` Instead of creating instances by hand, it's sometimes easier to use configuration via array or file to manage your specific assets. **[!] Note:** The `AssetFactory` is currently replaced step by step via Loaders. Methods are set to `@deprecated` which have been moved to a Loader. ## `AssetFactory::create()` To create a single Asset from an array, you can do following: ```php 'foo', 'url' => 'www.example.com/assets/style.css', 'location' => Asset::FRONTEND, 'type' => Style::class ], ); ``` ",
    "url": "https://inpsyde.github.io/assets/asset-factory.html",
    "relUrl": "/asset-factory.html"
  },"2": {
    "doc": "Assets",
    "title": "Assets",
    "content": "# Assets {: .fw-500 .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- There are two main classes delivered: * `Inpsyde\\Assets\\Script` - dealing with JavaScript-files. * `Inpsyde\\Assets\\Style` - dealing with CSS-files. Each instance requires a `string $handle`, `string $url` and `int $location`. ## Overview API Following configurations are available: |property|type|default|`Script`|`Style`|description|----|----|----|----|----|----|filePath|string|`''`|x|x|optional path which can be set to autodiscover the Asset version|dependencies|array|`[]`|x|x|all defined depending handles|location|int|falls back to `Asset::FRONTEND`|x|x|depending on location of the `Asset`, it will be enqueued with different hooks|version|string|`null`|x|x|version of the given asset|enqueue|bool/callable|`true`|x|x|is the asset only registered or also enqueued|data|array/callable|`[]`|x|x|additional data assigned to the asset via `WP_Script::add_data` or `WP_Style::add_data`|filters|callable[]|`[]`|x|x|an array of `Inpsyde\\Assets\\OutputFilter` or callable values to manipulate the output|handler|string|`ScriptHandler::class` or `StyleHandler::class`|x|x|The handler which will be used to register/enqueue the Asset|attributes|array|`[]`|x|x|Allows to set additional attributes to the `script`- or `link`-tag|media|string|`'all'`|x|type of media for the `Style`|localize|array|`[]`|x|localized array of data attached to `Script`|inFooter|bool|`true`|x|defines if the current `Script` is printed in footer|inline|array|`[]`|x|allows you to add inline scripts to `Script`-class via `['before' => [], 'after' => []]`|translation|array|`[]`|x|Load translation for `Script`-class via `['path' => string, 'domain' => string]`| ## Using the public API (methods) ### Versions The version can be set in different ways and even autogenerated based on the file time. Following is possible: | version | autodiscover | returns | note |----|----|----|----| `null` (default) | `true` (default) | filemtime | the default behavior | `null` (default) |`false` | `null` | no version in WP is used | `'1.2.3'` | `true` / `false` | `'1.2.3'` | | `''` | `true` / `false` | current WP version | ```php withFilePath('/path/to/script.js') ->disableAutodiscoverVersion() ->enableAutodiscoverVersion() ->withVersion('1.0'); $style = new Style('foo', 'www.example.com/style.css'); $style ->withFilePath('/path/to/style.css') ->disableAutodiscoverVersion() ->enableAutodiscoverVersion() ->withVersion('1.0'); ``` ### Enqueue conditionally You can enqueue your Assets conditionally by using following API: ```php canEnqueue(true); $style = new Style('foo', 'www.example.com/style.css'); $style->canEnqueue(function(): bool { return is_admin(); }); ``` By default Assets are always enqueued. ### Location By default, the package comes with predefined locations of assets: |const|hook|location|---|---|---|`Asset::FRONTEND`|`wp_enqueue_scripts`|Frontend|`Asset::BACKEND`|`admin_enqueue_scripts`|Backend|`Asset::LOGIN`|`login_enqueue_scripts`|wp-login.php|`Asset::CUSTOMIZER`|`customize_controls_enqueue_scripts`|Customizer|`Asset::CUSTOMIZER_PREVIEW`|`customize_preview_init`|Customizer Preview|`Asset::BLOCK_EDITOR_ASSETS`|`enqueue_block_editor_assets`|Gutenberg Editor|`Asset::BLOCK_ASSETS`|`enqueue_block_editor_assets`|Frontend and Gutenberg Editor| #### API Location can be set either in constructor directly or via methods: ```php forLocation(Asset::BACKEND); $style = new Style('foo', 'www.example.com/style.css'); $style->forLocation(Asset::FRONTEND); ``` The default location is `Asset::FRONTEND`. #### Using multiple locations To avoid duplicated registration of Assets in different locations such as backend and frontend, it is possible to add multiple ones via bitwise operator `|` (OR). Here's a short example for a `Style` which will be enqueued in frontend *and* backend: ```php forLocation(Asset::BACKEND | Asset::FRONTEND); $assetManager->register($style); } ); ``` ### Dependencies resolving Adding an `Asset` with dependencies can be done like following: ```php use Inpsyde\\Assets\\Script; use Inpsyde\\Assets\\Style; use Inpsyde\\Assets\\Asset; $script = new Script('foo', 'www.example.com/script.js', Asset::FRONTEND); $script->withDependencies('wp-elements', 'wp-core', 'wp-i18n'); $style = new Style('foo', 'www.example.com/style.css'); $style->withDependencies('wp-elements'); ``` #### Automatic resolving of Script dependencies with Webpack The `Inpsyde\\Assets\\Script`-class has support for resolving dependencies and version which are generated by [dependency-extraction-webpack-plugin](https://github.com/WordPress/gutenberg/tree/master/packages/dependency-extraction-webpack-plugin) . This Webpack-Plugin will create an additional `{fileName}.assets.json` or `{fileName}.assets.php`-file which contains an array of dependencies parsed out of your JavaScript-file and a version string. To use that feature you can use following: **script.assets.json** ```json { \"dependencies\": [ \"foo\", \"bar\", \"baz\" ], \"version\": \"1234567\" } ``` ```php forLocation(Asset::FRONTEND) ->useDependencyExtractionPlugin() ->withFilePath('/path/to/script.js'); $script->dependencies(); // [\"foo\", \"bar\", \"baz\"] $script->version(); // \"1234567\" ``` Based on your `Asset::filePath` the `Script` automatically searches in the same folder for `{fileName}.assets.json|php` and will load the data. **[!]** This will not overwrite your existing settings: **script.assets.php** ```php [\"foo\", \"bar\", \"baz\"], \"version\" => \"1234567\" ]; ``` ```php forLocation(Asset::FRONTEND) ->useDependencyExtractionPlugin() ->withVersion('1.0') ->withDependencies(\"some\", \"other\", \"dependencies\") ->withFilePath('/path/to/script.js'); $script->dependencies(); // [\"foo\", \"bar\", \"baz\", \"some\", \"other\", \"dependencies\"] $script->version(); // \"1.0\" ``` ### Change the Handler It is possible to change for an `Asset` the Handler like following: ```php useHandler(ScriptHandler::class); ``` ### Add Filters #### `Script` Scripts are having following filters available: ```php withFilters(AsyncScriptOutputFilter::class) ->useDeferFilter() // shortcut ->useAsyncFilter() // shortcut ->useInlineFilter() // shortcut ->withFilters(function(string $html, Asset $asset): string { // your custom filter return $html; }); ``` #### `Style` Styles are having following filters available: ```php withFilters(AsyncStyleOutputFilter::class) ->useAsyncFilter() // shortcut to above method ->useInlineFilter() // shortcut ->withFilters(function(string $html, Asset $asset): string { return $html; }); ``` ### Localize data Scripts can have localized data via `wp_localize_script()`, which can be added like following: ```php withLocalize('foo', ['multiple values']) ->withLocalize('bar', static function(): string { return 'other value'; }); ``` ### Translation data Scripts can also have translation data via `wp_set_script_translations()`. This can be added like following: ```php withTranslation('domain', '/path/to/json/file.json'); ``` ### Script enqueue Footer/Header To enqueue a script in header or footer - default is \"footer\" - we have following API available: ```php isInFooter() ->isInHeader(); ``` ### Adding inline scripts To add inline scripts via `wp_add_inline_script()` to your `Script`, you can use following: ```php appendInlineScript('var foo = \"bar\";') ->prependInlineScript('var baz = \"bam\"'); ``` ### Adding inline styles To add inline styles via `wp_add_inline_style()` to your `Style`, you can use following: ```php withInlineStyles('body { background-color: #000; }'); ``` ### Conditional comments for Script/Style Styles and Script can be wrapped into Conditional comments. To do so, you can use following: ```php withCondition('gt IE 9'); // $style = new Style('foo', 'www.example.com/style.css'); $style->withCondition('lt IE 9'); // ``` ### Attributes Allows you to set additional attributes to your `script`- or `link`-tag like following: ```php withAttributes( [ 'async' => true, 'data-value' => 'key', 'nonce' => wp_create_nonce() ] ); // $style = new Style('my-handle', 'style.css'); $style->withAttributes( [ 'data-value' => 'key', 'nonce' => wp_create_nonce() ] ); // | ``` Existing attributes like \"src\" or \"id\" are not overwriteable. The `Inpsyde\\Assets\\OutputFilter\\AttributesOutputFilter` only sets attributes which are not already existent on the html-tag. This will *not* work: ```php withAttributes(['src' => 'another-script.js']); // Will not overwrite \"script.js\" ``` ",
    "url": "https://inpsyde.github.io/assets/assets.html",
    "relUrl": "/assets.html"
  },"3": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": "# Getting started - the `AssetManager` {: .fw-500 } When using Assets in your theme or plugin, you can simply access the `Inpsyde\\Assets\\AssetManager` by hooking into the setup-hook. This way you can start registering your assets: ```php register( new Script('foo', 'www.example.com/script.js'), new Style('foo', 'www.example.com/style.css') ); } ); ``` ",
    "url": "https://inpsyde.github.io/assets/getting-started.html",
    "relUrl": "/getting-started.html"
  },"4": {
    "doc": "Helpers",
    "title": "Helpers",
    "content": "# Helpers {: .fw-500 .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- The `inpsyde/assets`-Package comes with some useful helper functions. ## Asset Suffix The function `Inpsyde\\Assets\\assetSuffix` allows to automatically suffix the given Asset with `.min` if `SCRIPT_DEBUG === false`: ```php my-script.min.js // if SCRIPT_DEBUG === true -> my-script.js ``` ## Symlink an Asset-folder Sometimes your Assets will not be inside the web-root, like Composer packages which are normally published outside of web-root. Therefor you can use a simple helper `Inpsyde\\Assets\\symlinkedAssetFolder` which allows you to move your asset-folder inside the web-root: ```php <?php use function Inpsyde\\Assets\\symlinkedAssetFolder; $assetDirUrl = symlinkedAssetFolder('/full/path/to/assets/', 'my-package'); // will return: https://www.example.com/wp-content/~inpsyde-assets/my-package/ ``` ",
    "url": "https://inpsyde.github.io/assets/helpers.html",
    "relUrl": "/helpers.html"
  },"5": {
    "doc": "Home",
    "title": "Home",
    "content": "# Inpsyde Assets {: .fw-500 } ## Introduction Inpsyde Assets is a Composer package (not a plugin) that allows to deal with scripts and styles in a WordPress site. ## Installation ``` $ composer require inpsyde/assets ``` ## Minimum Requirements and Dependencies * PHP 7+ * WordPress latest-2 When installed for development, via Composer, Inpsyde Assets also requires: * phpunit/phpunit (BSD-3-Clause) * brain/monkey (MIT) * inpsyde/php-coding-standards ## License and Copyright Copyright (c) Inpsyde GmbH. The team at [Inpsyde](https://inpsyde.com) is engineering the Web since 2006. ",
    "url": "https://inpsyde.github.io/assets/",
    "relUrl": "/"
  },"6": {
    "doc": "Loaders",
    "title": "Loaders",
    "content": "# Loaders {: .fw-500 .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- ## WebpackLoaders Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. There are 2 different Loaders available which are using generated `json`-files from Webpack: - `WebpackManifestLoader` - `EncoreEntrypointsLoader` ### `WebpackManifestLoader` The [webpack-manifest-plugin](https://www.npmjs.com/package/webpack-manifest-plugin) creates a `manifest.json`-file in your root output directory with a mapping of all source file names to their corresponding output file, for example: **manifest.json** ```json { \"script.js\": \"/public/path/script.23dafsf2138d.js\", \"style.css\": \"style.23dafsf2138d.css\", \"sub-folder/style.css\": \"\" } ``` To load this file in your application you can do following: ```php load('manifest.json'); ``` If the Asset URL needs to be changed, you can use following: ```php withDirectoryUrl('www.example.com/path/to/assets/'); /** @var \\Inpsyde\\Assets\\Asset[] $assets */ $assets = $loader->load('manifest.json'); ``` ### `EncoreEntrypointsLoader` [Symfony Webpack Encore](https://symfony.com/doc/current/frontend.html) provides a custom implementation of the [assets-webpack-plugin](https://www.npmjs.com/package/assets-webpack-plugin) which groups asset chunks into a single array for a given handle. The `EncoreEntrypointsLoader` can load those configurations and automatically configure your dependencies for splitted chunks. **entrypoints.json** ```json { \"entrypoints\": { \"theme\": { \"css\": [ \"./theme.css\", \"./theme1.css\", \"./theme2.css\", ] } } } ``` And loading this file: ```php load('entrypoints.json'); $second = $assets[1]; // theme1.css $second->dependencies(); // handle from $asset[0] $third = $assets[2]; // theme2.css $third->dependencies(); // handles from $asset[1] and $asset[2] ``` ## `ArrayLoader` To create multiple Assets you can use following: ```php 'foo', 'url' => 'www.example.com/assets/style.css', 'location' => Asset::FRONTEND, 'type' => Style::class ], [ 'handle' => 'bar', 'url' => 'www.example.com/assets/bar.js', 'location' => Asset::FRONTEND, 'type' => Script::class ], ]; $loader = new ArrayLoader(); /** @var Asset[] $assets */ $assets = $loader->load($config); ``` ## `PhpFileLoader` If you want to avoid having large array configuration in your code, you can move everything to an external PHP-file which returns the array: **config/assets.php** ```php 'foo', 'url' => 'www.example.com/assets/style.css', 'location' => Asset::FRONTEND, 'type' => Style::class ], [ 'handle' => 'bar', 'url' => 'www.example.com/assets/bar.js', 'location' => Asset::FRONTEND, 'type' => Script::class ], ]; ``` And in your application: ```php load('config/assets.php'); ``` ## Configure autodiscovering version In webpack it is possible to configure file name versioning which will produce something like: `script.{hash}.js`. To support versioning via file name you can simply disable the auto discovering of file versioning like this: ```php disableAutodiscoverVersion(); /** @var \\Inpsyde\\Assets\\Asset[] $assets */ $assets = $loader->load('manifest.json'); ``` **[!]** All 4 loaders supporting to disable the auto discovering of version. ",
    "url": "https://inpsyde.github.io/assets/loaders.html",
    "relUrl": "/loaders.html"
  },"7": {
    "doc": "Migration",
    "title": "Migration",
    "content": "# Migration {: .fw-500 .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- ## From 1.0 to 1.1 In version 1.1 we didn't implemented breaking changes, but we're renamend some internals for `Inpsyde\\Assets\\Asset` to be more clear when using the config-driven approach. In future you'll have to change your Asset-configuration, since we don't want to ship to much legacy code. The config key `type` has been renamend to `location`, while `class` is now `type`. The `Inpsyde\\Assets\\Asset:type()` will be now `Inpsyde\\Assets\\Asset:location()`. **Before:** ```php 'my-handle', 'src' => 'script.css', 'type' => Asset::FRONTEND, 'class' => Style::class, ] ); ``` **After:** ```php 'my-handle', 'src' => 'script.css', 'location' => Asset::FRONTEND, 'type' => Style::class, ] ); ``` ## From 0.2 to 1.0 ### Asset registration {: .no_toc } In version 1.0 the function `Inpsyde\\Assets\\assetManager()` was replaced to improve the compatilibty with WordPress and to avoid calling `wp_styles()` and `wp_scripts()` too early. This is why the registration of an `Asset` now happens via hook callback instead of using the factory-function. **Before:** ```php register(...); ``` **After:** ```php register(...); } ); ``` ### Renaming of `Asset`-flags and `AssetFactory::create` requirements {: .no_toc } The type-flags from `Inpsyde\\Assets\\Asset` are renamed after the location where the given asset will be enqueued. Also the `type` is now no longer used to create instances of the class. Instead the class itself should be defined in `'class'`-field of the `$config` when using the `AssetFactory`. This enables also the possiblity to use different implementations of `Inpsyde\\Assets\\Asset` with own `INpsyde\\Assets\\Handler\\AssetHandler`. **Before:** ```php 'my-handle', 'src' => 'script.css', 'type' => Asset::TYPE_STYLE, ] ); ``` **After:** ```php 'my-handle', 'src' => 'script.css', 'type' => Asset::FRONTEND, 'class' => Style::class ] ); ``` ---- ## From 0.1 to 0.2 In version 0.2 the function `Inpsyde\\Assets\\assetFactory()` was removed and replaced by the static factory. **Before:** ```php create(...); ``` **After:** ```php <?php use Inpsyde\\Assets\\AssetFactory; AssetFactory::create(...); ``` ",
    "url": "https://inpsyde.github.io/assets/migration.html",
    "relUrl": "/migration.html"
  },"8": {
    "doc": "Output Filter",
    "title": "Output Filter",
    "content": "# Output Filter {: .fw-500 .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- ## Output Filter ###`OutputFilter` {: .no_toc } These callbacks are specified to manipulate the output of the `Script` via `script_loader_tag` and `Style` via `style_loader_tag`. To use an `OutputFilter` you've to assign them to a specific asset: ```php withFilters(AsyncScriptOutputFilter::class); ``` ## Available filters Following default OutputFilters are shipped with this package: ### `AsyncStyleOutputFilter` {: .no_toc } This filter will allow you to load your CSS async via `preload`. It also delivers a polyfill for older browsers which is appended once to ensure that script-loading works properly. ``` | ``` ### `InlineAssetOutputFilter` {: .no_toc } This filter allows you to print your `Style` or `Script` inline into the DOM if the file is readable. ### `AttributesOutputFilter` {: .no_toc } This filter will be added automatically if you're using `Asset::withAttributes([])` and allows you to set additonal key-value pairs as attributes to your `script`- or `link`-tag. See more in [Assets](./assets.md). ### `AsyncScriptOutputFilter` (deprecated) {: .no_toc } **[!] deprecated:** Please use instead `Script::withAttributes(['async' => true]);` ### `DeferScriptOutputFilter` (deprecated) {: .no_toc } **[!] deprecated:** Please use instead `Script::withAttributes(['defer' => true]);` ## Create your own filter You can either implement the `Inpsyde\\Assets\\OutputFilter\\AssetOutputFilter`-interface or just use a normal callable function which will applied on the `Asset`: ```php withFilters($customFilter); ``` ",
    "url": "https://inpsyde.github.io/assets/output-filter.html",
    "relUrl": "/output-filter.html"
  }
}
